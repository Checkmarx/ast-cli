version: 2.1 # use CircleCI 2.1
executors:
  go-container:
    docker:
      - image: circleci/golang:1.13.7
  go-lint:
    docker:
      - image: golangci/golangci-lint:v1.23.6-alpine
    resource_class: small
  circle-machine:
    machine:
      image: ubuntu-1604:202004-01
      #docker_layer_caching: true

jobs:
  unit-tests:
    executor: 
      circle-machine
    working_directory: ~/repo
    steps:
      - checkout
      - run: 
          name: Config GOPRIVATE environment variable
          command: echo "export GOPRIVATE=github.com/checkmarxDev/*" >> $BASH_ENV
      - run:
          name: Config Git credentials
          command: git config --global url."https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com".insteadOf "https://github.com"
      - restore_cache:
          keys:
            - go-mod-v2-{{ checksum "go.sum" }}
      - run: go env
      - run: 
          name: go test with coverage
          command: |
            echo 'Defaults env_keep += "GOPATH"' | sudo tee --append /etc/sudoers.d/env_keep && \
            sudo GOROOT=/usr/local/go go test ./... -coverprofile cover.out
          no_output_timeout: 2m
      - run:
          name: Check if total coverage is greater then 0
          command: |
          
            CODE_COV=$(go tool cover -func cover.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
            EXPECTED_CODE_COV=0
            var=$(awk 'BEGIN{ print "'$CODE_COV'"<"'$EXPECTED_CODE_COV'" }')   
            if [ "$var" -eq 1 ];then
              echo "Your code coverage is too low. Coverage precentage is: $CODE_COV"
   
              exit 1
            else
              echo "Your code coverage test passed! Coverage precentage is: $CODE_COV"
              
              exit 0
            fi
      - save_cache: # Store cache in the /go/pkg directory
          key: go-mod-v2-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"

  lint:
    executor:
      go-lint
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Config GOPRIVATE environment variable
          command: echo "export GOPRIVATE=github.com/checkmarxDev/*" >> $BASH_ENV
      - run:
          name: Config Git credentials
          command: git config --global url."https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com".insteadOf "https://github.com"
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
      - run:
          name: Run golangci-lint
          command: golangci-lint run ./...
          no_output_timeout: 2m
      - save_cache: # Store cache in the /go/pkg directory
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"
            
  publish-github-release:
    executor:
      go-container
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Config GOPRIVATE environment variable
          command: echo "export GOPRIVATE=github.com/checkmarxDev/*" >> $BASH_ENV
      - run:
          name: Config Git credentials
          command: git config --global url."https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com".insteadOf "https://github.com"
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
      - run: go mod download
      - run: 
          name: Build Linux_amd64 binary 
          command: GOOS=linux GOARCH=amd64 go build -o bin/ast cmd/main.go
      - run:
          name: Build Windows binary
          command: GOOS=windows GOARCH=amd64 go build -o bin/ast.exe ./cmd
      - run: go get github.com/tcnksm/ghr
      - run:
          name: Publish GitHub release
          command: |
            VERSION=$(./bin/ast version)
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete ${VERSION} ./bin/
      - save_cache: # Store cache in the /go/pkg directory
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"
            
workflows:
  Test-workflow:
    jobs:
      - unit-tests:
          filters:
            branches:
              ignore:
                - master
      - lint:
          filters:
            branches:
              ignore:
                - master
          context: AWS

  release-publish-workflow:
    jobs:    
      - publish-github-release:
          filters:
            branches:
              only:
                - master
          context: AWS
