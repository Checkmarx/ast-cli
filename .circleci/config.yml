version: 2.1 # use CircleCI 2.1
executors:
  go-container:
    docker:
      - image: circleci/golang:1.16.2
  go-lint:
    docker:
      - image: golangci/golangci-lint:v1.40.1-alpine
    resource_class: small
  circle-machine:
    machine:
      image: ubuntu-2004:202104-01
      #docker_layer_caching: true
  docker-publisher:
    environment:
      IMAGE_NAME: ast-cli
    docker:
      - image: circleci/buildpack-deps:stretch

orbs:
  checkmarx: checkmarx/circleci-kpi-shipper@0.11.0

jobs:
  unit-tests:
    executor:
      circle-machine
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Config GOPRIVATE environment variable
          command: echo "export GOPRIVATE=github.com/checkmarxDev/*" >> $BASH_ENV
      - run:
          name: Config Git credentials
          command: git config --global url."https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com".insteadOf "https://github.com"
      - restore_cache:
          keys:
            - go-mod-v2-{{ checksum "go.sum" }}
      - run:
          name: go test with coverage
          command: |
            sudo chmod +x ./internal/commands/.scripts/up.sh \
            ./internal/commands/.scripts/down.sh
            sudo -E env "PATH=$PATH" go test ./... -coverprofile cover.out
          no_output_timeout: 2m
      - run:
          name: Check if total coverage is greater then 0
          command: |
            CODE_COV=$(go tool cover -func cover.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
            EXPECTED_CODE_COV=0
            var=$(awk 'BEGIN{ print "'$CODE_COV'"<"'$EXPECTED_CODE_COV'" }')
            if [ "$var" -eq 1 ];then
              echo "Your code coverage is too low. Coverage precentage is: $CODE_COV"
              exit 1
            else
              echo "Your code coverage test passed! Coverage precentage is: $CODE_COV"
              exit 0
            fi
      - save_cache: # Store cache in the /go/pkg directory
          key: go-mod-v2-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"

  integration-tests:
    executor:
      circle-machine
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Config GOPRIVATE environment variable
          command: echo "export GOPRIVATE=github.com/checkmarxDev/*" >> $BASH_ENV
      - run:
          name: Config Git credentials
          command: git config --global url."https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com".insteadOf "https://github.com"
      - restore_cache:
          keys:
            - go-mod-v2-{{ checksum "go.sum" }}
      - run:
          name: go integration test
          command: |
            sudo chmod +x ./internal/commands/.scripts/integration_up.sh
            sudo -E env "PATH=$PATH" ./internal/commands/.scripts/integration_up.sh
          no_output_timeout: 2m
      - save_cache: # Store cache in the /go/pkg directory
          key: go-mod-v2-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"

  lint:
    executor:
      go-lint
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Config GOPRIVATE environment variable
          command: echo "export GOPRIVATE=github.com/checkmarxDev/*" >> $BASH_ENV
      - run:
          name: Config Git credentials
          command: git config --global url."https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com".insteadOf "https://github.com"
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
      - run:
          name: Run golangci-lint
          command: golangci-lint run ./...
          no_output_timeout: 2m
      - save_cache: # Store cache in the /go/pkg directory
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"
  docker-build:
    # -remove-
    executor: docker-publisher
    #executor: circle-machine
    steps:
      - checkout
      # -remove-
      - setup_remote_docker
      - run:
          name: Build Docker image
          command: |
            docker build --build-arg GIT_USER=${GITHUB_USER} \
            --build-arg GIT_TOKEN=${GITHUB_TOKEN} \
            -t $IMAGE_NAME:latest .
      - run:
          name: Archive Docker image
          command: docker save -o image.tar $IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar
  docker-publish-latest:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          #command: ls
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USER" --password-stdin
            docker tag $IMAGE_NAME:latest $DOCKER_USER/$IMAGE_NAME:latest
            docker push $DOCKER_USER/$IMAGE_NAME:latest
workflows:
  Visibility-workflow:
    jobs:
      - checkmarx/circleci-kpi-shipper
  Test-workflow:
    jobs:
      - unit-tests:
          filters:
            branches:
              ignore:
      - integration-tests:
          filters:
            branches:
              ignore:
      - lint:
          filters:
            branches:
              ignore:
          context: AWS
      - docker-build:
          filters:
            branches:
              ignore:
          context: AWS
      - docker-publish-latest:
          requires:
            - docker-build
          filters:
            branches:
              only: master
          context: AWS